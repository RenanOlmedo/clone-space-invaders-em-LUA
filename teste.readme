-- main.lua (adaptado para sprites grandes)

local screenWidth, screenHeight = 1280, 900 -- janela maior para sprites grandes

local gameState = "start"                   -- start, playing, gameover, victory

-- Dimensões reais das sprites (conforme você passou)
local PLAYER_W, PLAYER_H = 112, 75
local ENEMY_WS = { 97, 97, 103 } -- largura por tipo
local ENEMY_H = 84
local BULLET_W, BULLET_H = 13, 37
local POWERUP_W, POWERUP_H = 19, 30
local EXPLOSION_W, EXPLOSION_H = 97, 76 -- opcional

-- Jogador
local player = {
    x = (screenWidth / 2) - PLAYER_W / 2,
    y = screenHeight - PLAYER_H - 40,
    width = PLAYER_W,
    height = PLAYER_H,
    speed = 300,
    bullets = {},
    lives = 3,
    canShoot = true,
    shootCooldown = 0.3,
    shootTimer = 0,
    shootType = "single", -- single, double, spread
}

-- Inimigos
local enemies = {}
local enemyRows = 4
local enemyCols = 8
local enemyWidthMax = math.max(unpack(ENEMY_WS))
local enemyHeight = ENEMY_H
local enemySpeed = 100
local enemyDirection = 1
local enemyDrop = 20
local enemyShootInterval = 3
local enemyShootTimer = 0

local enemyBullets = {}

-- Power-ups
local powerUps = {}
local maxPowerUpsPerPhase = 3
local powerUpTimer = 0
local powerUpSpawnInterval = 15
local powerUpsDropped = 0 -- controla total droppado por fase

-- Explosões (opcional)
local explosions = {}

local score = 0

local sprites = {}

-- helper: carrega imagem só se existir (evita erro se o arquivo não estiver)
local function loadIfExists(path)
    if love.filesystem.getInfo(path) then
        return love.graphics.newImage(path)
    end
    return nil
end

function love.load()
    love.window.setMode(screenWidth, screenHeight)
    love.window.setTitle("Space Invaders Retro")
    love.graphics.setDefaultFilter("nearest", "nearest")

    -- Carregar sprites (coloque os PNG na pasta sprites/)
    sprites.player = love.graphics.newImage("sprites/player.png")

    sprites.enemies = {
        love.graphics.newImage("sprites/enemy1.png"),
        love.graphics.newImage("sprites/enemy2.png"),
        love.graphics.newImage("sprites/enemy3.png"),
    }

    sprites.bullet = love.graphics.newImage("sprites/player_bullet.png")
    sprites.enemy_bullet = love.graphics.newImage("sprites/enemy_bullet.png")

    sprites.powerups = {
        rapid = loadIfExists("sprites/powerup_rapid.png"),
        double = loadIfExists("sprites/powerup_double.png"),
        spread = loadIfExists("sprites/powerup_spread.png"),
        life = loadIfExists("sprites/powerup_life.png"),
        speed = loadIfExists("sprites/powerup_speed.png"),
    }

    sprites.background = loadIfExists("sprites/background.png")
    sprites.explosion = loadIfExists("sprites/explosion.png") -- opcional

    createEnemies()
end

function createEnemies()
    enemies = {}
    powerUps = {}
    powerUpsDropped = 0
    powerUpTimer = powerUpSpawnInterval

    -- espaçamento entre colunas/linhas (ajustável)
    local spacingX = 20
    local spacingY = 20

    -- largura total aproximada usando largura máxima para evitar overflow
    local totalW = enemyCols * enemyWidthMax + (enemyCols - 1) * spacingX
    local startX = math.max(40, (screenWidth - totalW) / 2) -- margem mínima

    for row = 1, enemyRows do
        for col = 1, enemyCols do
            local etype = ((row - 1) % 3) + 1 -- 1..3
            local w = ENEMY_WS[etype]
            local h = ENEMY_H

            -- posiciona centrado dentro da "coluna" de largura max
            local colX = startX + (col - 1) * (enemyWidthMax + spacingX)
            local x = colX + (enemyWidthMax - w) / 2
            local y = 50 + (row - 1) * (h + spacingY)

            table.insert(enemies, {
                x = x,
                y = y,
                width = w,
                height = h,
                alive = true,
                type = etype,
                moveType = (row % 3) + 1,
                isShooting = false,
                shootFlashTimer = 0,
            })
        end
    end

    enemySpeed = 100
    enemyDirection = 1
    enemyShootTimer = enemyShootInterval
end

function love.update(dt)
    if gameState == "playing" then
        updatePlayer(dt)
        updateBullets(dt)
        updateEnemies(dt)
        updateEnemyBullets(dt)
        updatePowerUps(dt)

        enemyShootTimer = enemyShootTimer - dt
        powerUpTimer = powerUpTimer - dt

        if enemyShootTimer <= 0 then
            enemyShoot()
            enemyShootTimer = enemyShootInterval
        end

        -- spawn periódico só se ainda não excedeu total por fase
        if powerUpTimer <= 0 and powerUpsDropped < maxPowerUpsPerPhase then
            spawnPowerUp()
            powerUpTimer = powerUpSpawnInterval
        end

        if player.lives <= 0 then
            gameState = "gameover"
        end

        local allDead = true
        for _, e in ipairs(enemies) do
            if e.alive then
                allDead = false; break
            end
        end
        if allDead then gameState = "victory" end
    end
end

function updatePlayer(dt)
    if love.keyboard.isDown("left") then
        player.x = player.x - player.speed * dt
    elseif love.keyboard.isDown("right") then
        player.x = player.x + player.speed * dt
    end

    -- limites com base no WIDTH real do player
    if player.x < 0 then player.x = 0 end
    if player.x > screenWidth - player.width then player.x = screenWidth - player.width end

    player.shootTimer = player.shootTimer - dt
    if player.shootTimer < 0 then player.canShoot = true end
end

-- atualiza tiros do jogador (inclui dx para spread)
function updateBullets(dt)
    for i = #player.bullets, 1, -1 do
        local b = player.bullets[i]
        b.y = b.y - b.speed * dt
        if b.dx then b.x = b.x + b.dx * dt end

        if b.y + BULLET_H < 0 or b.x + BULLET_W < 0 or b.x > screenWidth then
            table.remove(player.bullets, i)
        else
            for _, enemy in ipairs(enemies) do
                if enemy.alive and
                    b.x + BULLET_W > enemy.x and b.x < enemy.x + enemy.width and
                    b.y + BULLET_H > enemy.y and b.y < enemy.y + enemy.height then
                    enemy.alive = false
                    table.remove(player.bullets, i)
                    score = score + 10
                    increaseEnemySpeed()
                    -- chance de dropar powerup quando o inimigo morre (se ainda não atingiu limite)
                    if powerUpsDropped < maxPowerUpsPerPhase and love.math.random() < 0.20 then
                        powerUpsDropped = powerUpsDropped + 1
                        spawnPowerUpAt(enemy.x + enemy.width / 2 - POWERUP_W / 2, enemy.y)
                    end
                    break
                end
            end
        end
    end
end

function increaseEnemySpeed()
    enemySpeed = enemySpeed + 5
end

function updateEnemies(dt)
    local moveDown = false
    for _, enemy in ipairs(enemies) do
        if enemy.alive then
            if enemy.moveType == 1 then
                enemy.x = enemy.x + enemyDirection * enemySpeed * dt
            elseif enemy.moveType == 2 then
                enemy.x = enemy.x + enemyDirection * enemySpeed * dt
                enemy.y = enemy.y + math.sin(love.timer.getTime() * 1.5 + enemy.x * 0.01) * 6 * dt
            elseif enemy.moveType == 3 then
                enemy.x = enemy.x + enemyDirection * (enemySpeed + 30) * dt
            end

            if enemy.x + enemy.width > screenWidth or enemy.x < 0 then
                moveDown = true
            end

            if enemy.isShooting then
                enemy.shootFlashTimer = enemy.shootFlashTimer - dt
                if enemy.shootFlashTimer <= 0 then enemy.isShooting = false end
            end
        end
    end

    if moveDown then
        enemyDirection = -enemyDirection
        for _, enemy in ipairs(enemies) do
            enemy.y = enemy.y + enemyDrop
            if enemy.y + enemy.height > player.y then gameState = "gameover" end
        end
    end
end

function enemyShoot()
    local alive = {}
    for _, e in ipairs(enemies) do if e.alive then table.insert(alive, e) end end
    if #alive == 0 then return end

    local shooter = alive[love.math.random(#alive)]
    shooter.isShooting = true
    shooter.shootFlashTimer = 0.5

    table.insert(enemyBullets, {
        x = shooter.x + shooter.width / 2 - BULLET_W / 2,
        y = shooter.y + shooter.height,
        speed = 250,
    })
end

function updateEnemyBullets(dt)
    for i = #enemyBullets, 1, -1 do
        local b = enemyBullets[i]
        b.y = b.y + b.speed * dt

        if b.y > screenHeight then
            table.remove(enemyBullets, i)
        else
            if b.x + BULLET_W > player.x and b.x < player.x + player.width and
                b.y + BULLET_H > player.y and b.y < player.y + player.height then
                table.remove(enemyBullets, i)
                player.lives = player.lives - 1
            end
        end
    end
end

function updatePowerUps(dt)
    for i = #powerUps, 1, -1 do
        local p = powerUps[i]
        p.y = p.y + p.speed * dt
        if p.y > screenHeight then
            table.remove(powerUps, i)
        else
            if p.x + POWERUP_W > player.x and p.x < player.x + player.width and
                p.y + POWERUP_H > player.y and p.y < player.y + player.height then
                applyPowerUp(p.type)
                table.remove(powerUps, i)
            end
        end
    end
end

function applyPowerUp(type)
    if type == "life" then
        player.lives = math.min(player.lives + 1, 5)
    elseif type == "speed" then
        player.speed = player.speed + 50
    elseif type == "rapid" then
        player.shootCooldown = 0.15
    elseif type == "double" then
        player.shootType = "double"
    elseif type == "spread" then
        player.shootType = "spread"
    end
end

-- spawn em posição aleatória (usa powerUpsDropped controle externo)
function spawnPowerUp()
    if powerUpsDropped >= maxPowerUpsPerPhase then return end
    powerUpsDropped = powerUpsDropped + 1
    local types = { "life", "speed", "rapid", "double", "spread" }
    local ptype = types[love.math.random(#types)]
    table.insert(powerUps, {
        x = love.math.random(40, screenWidth - 40 - POWERUP_W),
        y = -POWERUP_H,
        speed = 100,
        type = ptype,
    })
end

-- spawn direto na posição do inimigo (quando morre)
function spawnPowerUpAt(x, y)
    if powerUpsDropped >= maxPowerUpsPerPhase then return end
    local types = { "life", "speed", "rapid", "double", "spread" }
    local ptype = types[love.math.random(#types)]
    table.insert(powerUps, { x = x - POWERUP_W / 2, y = y, speed = 100, type = ptype })
end

function love.draw()
    -- fundo (opcional)
    if sprites.background then
        love.graphics.draw(sprites.background, 0, 0)
    else
        love.graphics.clear(0, 0, 0)
    end

    if gameState == "start" then
        love.graphics.setColor(1, 1, 1)
        love.graphics.printf("Pressione Espaço para começar", 0, screenHeight / 2 - 20, screenWidth, "center")
        love.graphics.printf("Use as setas para mover, espaço para atirar", 0, screenHeight / 2 + 20, screenWidth,
            "center")
    elseif gameState == "playing" then
        love.graphics.setColor(1, 1, 1)
        love.graphics.draw(sprites.player, player.x, player.y)

        -- balas jogador
        for _, b in ipairs(player.bullets) do
            love.graphics.draw(sprites.bullet, b.x, b.y)
        end

        -- inimigos
        for _, e in ipairs(enemies) do
            if e.alive then
                if e.isShooting and e.shootFlashTimer > 0 then
                    if math.floor(e.shootFlashTimer * 10) % 2 == 0 then love.graphics.setColor(1, 1, 1) else love
                            .graphics.setColor(1, 0, 0) end
                else
                    love.graphics.setColor(1, 1, 1)
                end
                love.graphics.draw(sprites.enemies[e.type], e.x, e.y)
                love.graphics.setColor(1, 1, 1)
            end
        end

        -- tiros inimigos
        for _, b in ipairs(enemyBullets) do
            love.graphics.draw(sprites.enemy_bullet, b.x, b.y)
        end

        -- power-ups
        for _, p in ipairs(powerUps) do
            local img = sprites.powerups[p.type]
            if img then
                love.graphics.draw(img, p.x, p.y)
            else
                love.graphics.setColor(1, 1, 0); love.graphics.rectangle("fill", p.x, p.y, POWERUP_W, POWERUP_H); love
                    .graphics.setColor(1, 1, 1)
            end
        end

        -- explosões (se existe sprite)
        if sprites.explosion then
            for _, ex in ipairs(explosions) do love.graphics.draw(sprites.explosion, ex.x, ex.y) end
        end

        -- HUD
        love.graphics.setColor(1, 1, 0)
        love.graphics.print("Pontuação: " .. score, 10, 10)
        love.graphics.setColor(0, 1, 0)
        love.graphics.print("Vidas: " .. player.lives, 10, 40)
        love.graphics.setColor(1, 1, 1)
    elseif gameState == "gameover" then
        love.graphics.setColor(1, 0, 0)
        love.graphics.printf("GAME OVER", 0, screenHeight / 2 - 40, screenWidth, "center")
        love.graphics.setColor(1, 1, 1)
        love.graphics.printf("Sua pontuação: " .. score, 0, screenHeight / 2, screenWidth, "center")
        love.graphics.printf("Pressione Espaço para reiniciar", 0, screenHeight / 2 + 40, screenWidth, "center")
    elseif gameState == "victory" then
        love.graphics.setColor(0, 1, 0)
        love.graphics.printf("VOCÊ VENCEU!", 0, screenHeight / 2 - 40, screenWidth, "center")
        love.graphics.setColor(1, 1, 1)
        love.graphics.printf("Pontuação final: " .. score, 0, screenHeight / 2, screenWidth, "center")
        love.graphics.printf("Pressione Espaço para reiniciar", 0, screenHeight / 2 + 40, screenWidth, "center")
    end
end

function love.keypressed(key)
    if gameState == "start" and key == "space" then
        gameState = "playing"
        player.lives = 3
        player.bullets = {}
        enemyBullets = {}
        powerUps = {}
        explosions = {}
        score = 0
        player.speed = 300
        player.shootType = "single"
        player.shootCooldown = 0.3
        createEnemies()
    elseif gameState == "playing" and key == "space" then
        if player.canShoot then
            if player.shootType == "single" then
                table.insert(player.bullets, {
                    x = player.x + player.width / 2 - BULLET_W / 2,
                    y = player.y,
                    speed = 600,
                })
            elseif player.shootType == "double" then
                table.insert(player.bullets, {
                    x = player.x + player.width / 4 - BULLET_W / 2,
                    y = player.y,
                    speed = 600,
                })
                table.insert(player.bullets, {
                    x = player.x + player.width * 3 / 4 - BULLET_W / 2,
                    y = player.y,
                    speed = 600,
                })
            elseif player.shootType == "spread" then
                table.insert(player.bullets,
                    { x = player.x + player.width / 2 - BULLET_W / 2, y = player.y, speed = 600, dx = 0 })
                table.insert(player.bullets,
                    { x = player.x + player.width / 2 - BULLET_W / 2, y = player.y, speed = 600, dx = -180 })
                table.insert(player.bullets,
                    { x = player.x + player.width / 2 - BULLET_W / 2, y = player.y, speed = 600, dx = 180 })
            end

            player.canShoot = false
            player.shootTimer = player.shootCooldown
        end
    elseif (gameState == "gameover" or gameState == "victory") and key == "space" then
        gameState = "start"
    elseif key == "escape" then
        love.event.quit()
    end
end
